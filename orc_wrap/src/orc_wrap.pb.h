// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orc_wrap.proto

#ifndef PROTOBUF_orc_5fwrap_2eproto__INCLUDED
#define PROTOBUF_orc_5fwrap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_orc_5fwrap_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTypeImpl();
void InitDefaultsType();
void InitDefaultsFieldImpl();
void InitDefaultsField();
void InitDefaultsRowImpl();
void InitDefaultsRow();
inline void InitDefaults() {
  InitDefaultsType();
  InitDefaultsField();
  InitDefaultsRow();
}
}  // namespace protobuf_orc_5fwrap_2eproto
namespace orc_proto {
class Field;
class FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class Row;
class RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class Type;
class TypeDefaultTypeInternal;
extern TypeDefaultTypeInternal _Type_default_instance_;
}  // namespace orc_proto
namespace orc_proto {

enum Type_Kind {
  Type_Kind_BOOLEAN = 0,
  Type_Kind_BYTE = 1,
  Type_Kind_SHORT = 2,
  Type_Kind_INT = 3,
  Type_Kind_LONG = 4,
  Type_Kind_FLOAT = 5,
  Type_Kind_DOUBLE = 6,
  Type_Kind_STRING = 7,
  Type_Kind_BINARY = 8,
  Type_Kind_TIMESTAMP = 9,
  Type_Kind_LIST = 10,
  Type_Kind_MAP = 11,
  Type_Kind_STRUCT = 12,
  Type_Kind_UNION = 13,
  Type_Kind_DECIMAL = 14,
  Type_Kind_DATE = 15,
  Type_Kind_VARCHAR = 16,
  Type_Kind_CHAR = 17,
  Type_Kind_TIMESTAMP_INSTANT = 18,
  Type_Kind_Type_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Type_Kind_Type_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Type_Kind_IsValid(int value);
const Type_Kind Type_Kind_Kind_MIN = Type_Kind_BOOLEAN;
const Type_Kind Type_Kind_Kind_MAX = Type_Kind_TIMESTAMP_INSTANT;
const int Type_Kind_Kind_ARRAYSIZE = Type_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_Kind_descriptor();
inline const ::std::string& Type_Kind_Name(Type_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_Kind_descriptor(), value);
}
inline bool Type_Kind_Parse(
    const ::std::string& name, Type_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type_Kind>(
    Type_Kind_descriptor(), name, value);
}
// ===================================================================

class Type : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:orc_proto.Type) */ {
 public:
  Type();
  virtual ~Type();

  Type(const Type& from);

  inline Type& operator=(const Type& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Type(Type&& from) noexcept
    : Type() {
    *this = ::std::move(from);
  }

  inline Type& operator=(Type&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Type* internal_default_instance() {
    return reinterpret_cast<const Type*>(
               &_Type_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Type* other);
  friend void swap(Type& a, Type& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Type* New() const PROTOBUF_FINAL { return New(NULL); }

  Type* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Type& from);
  void MergeFrom(const Type& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Type* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Type_Kind Kind;
  static const Kind BOOLEAN =
    Type_Kind_BOOLEAN;
  static const Kind BYTE =
    Type_Kind_BYTE;
  static const Kind SHORT =
    Type_Kind_SHORT;
  static const Kind INT =
    Type_Kind_INT;
  static const Kind LONG =
    Type_Kind_LONG;
  static const Kind FLOAT =
    Type_Kind_FLOAT;
  static const Kind DOUBLE =
    Type_Kind_DOUBLE;
  static const Kind STRING =
    Type_Kind_STRING;
  static const Kind BINARY =
    Type_Kind_BINARY;
  static const Kind TIMESTAMP =
    Type_Kind_TIMESTAMP;
  static const Kind LIST =
    Type_Kind_LIST;
  static const Kind MAP =
    Type_Kind_MAP;
  static const Kind STRUCT =
    Type_Kind_STRUCT;
  static const Kind UNION =
    Type_Kind_UNION;
  static const Kind DECIMAL =
    Type_Kind_DECIMAL;
  static const Kind DATE =
    Type_Kind_DATE;
  static const Kind VARCHAR =
    Type_Kind_VARCHAR;
  static const Kind CHAR =
    Type_Kind_CHAR;
  static const Kind TIMESTAMP_INSTANT =
    Type_Kind_TIMESTAMP_INSTANT;
  static inline bool Kind_IsValid(int value) {
    return Type_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    Type_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    Type_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    Type_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return Type_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return Type_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return Type_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 subtypes = 2 [packed = true];
  int subtypes_size() const;
  void clear_subtypes();
  static const int kSubtypesFieldNumber = 2;
  ::google::protobuf::uint32 subtypes(int index) const;
  void set_subtypes(int index, ::google::protobuf::uint32 value);
  void add_subtypes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      subtypes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_subtypes();

  // repeated string fieldNames = 3;
  int fieldnames_size() const;
  void clear_fieldnames();
  static const int kFieldNamesFieldNumber = 3;
  const ::std::string& fieldnames(int index) const;
  ::std::string* mutable_fieldnames(int index);
  void set_fieldnames(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fieldnames(int index, ::std::string&& value);
  #endif
  void set_fieldnames(int index, const char* value);
  void set_fieldnames(int index, const char* value, size_t size);
  ::std::string* add_fieldnames();
  void add_fieldnames(const ::std::string& value);
  #if LANG_CXX11
  void add_fieldnames(::std::string&& value);
  #endif
  void add_fieldnames(const char* value);
  void add_fieldnames(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fieldnames() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fieldnames();

  // .orc_proto.Type.Kind kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  ::orc_proto::Type_Kind kind() const;
  void set_kind(::orc_proto::Type_Kind value);

  // uint32 maximumLength = 4;
  void clear_maximumlength();
  static const int kMaximumLengthFieldNumber = 4;
  ::google::protobuf::uint32 maximumlength() const;
  void set_maximumlength(::google::protobuf::uint32 value);

  // uint32 precision = 5;
  void clear_precision();
  static const int kPrecisionFieldNumber = 5;
  ::google::protobuf::uint32 precision() const;
  void set_precision(::google::protobuf::uint32 value);

  // uint32 scale = 6;
  void clear_scale();
  static const int kScaleFieldNumber = 6;
  ::google::protobuf::uint32 scale() const;
  void set_scale(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:orc_proto.Type)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > subtypes_;
  mutable int _subtypes_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fieldnames_;
  int kind_;
  ::google::protobuf::uint32 maximumlength_;
  ::google::protobuf::uint32 precision_;
  ::google::protobuf::uint32 scale_;
  mutable int _cached_size_;
  friend struct ::protobuf_orc_5fwrap_2eproto::TableStruct;
  friend void ::protobuf_orc_5fwrap_2eproto::InitDefaultsTypeImpl();
};
// -------------------------------------------------------------------

class Field : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:orc_proto.Field) */ {
 public:
  Field();
  virtual ~Field();

  Field(const Field& from);

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Field(Field&& from) noexcept
    : Field() {
    *this = ::std::move(from);
  }

  inline Field& operator=(Field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Field& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Field* other);
  friend void swap(Field& a, Field& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Field* New() const PROTOBUF_FINAL { return New(NULL); }

  Field* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Field* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .orc_proto.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::orc_proto::Type& type() const;
  ::orc_proto::Type* release_type();
  ::orc_proto::Type* mutable_type();
  void set_allocated_type(::orc_proto::Type* type);

  // int64 i = 2;
  void clear_i();
  static const int kIFieldNumber = 2;
  ::google::protobuf::int64 i() const;
  void set_i(::google::protobuf::int64 value);

  // uint32 length = 3;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:orc_proto.Field)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::orc_proto::Type* type_;
  ::google::protobuf::int64 i_;
  ::google::protobuf::uint32 length_;
  mutable int _cached_size_;
  friend struct ::protobuf_orc_5fwrap_2eproto::TableStruct;
  friend void ::protobuf_orc_5fwrap_2eproto::InitDefaultsFieldImpl();
};
// -------------------------------------------------------------------

class Row : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:orc_proto.Row) */ {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Row* other);
  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Row* New() const PROTOBUF_FINAL { return New(NULL); }

  Row* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Row* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .orc_proto.Field field = 1;
  int field_size() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::orc_proto::Field& field(int index) const;
  ::orc_proto::Field* mutable_field(int index);
  ::orc_proto::Field* add_field();
  ::google::protobuf::RepeatedPtrField< ::orc_proto::Field >*
      mutable_field();
  const ::google::protobuf::RepeatedPtrField< ::orc_proto::Field >&
      field() const;

  // @@protoc_insertion_point(class_scope:orc_proto.Row)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::orc_proto::Field > field_;
  mutable int _cached_size_;
  friend struct ::protobuf_orc_5fwrap_2eproto::TableStruct;
  friend void ::protobuf_orc_5fwrap_2eproto::InitDefaultsRowImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Type

// .orc_proto.Type.Kind kind = 1;
inline void Type::clear_kind() {
  kind_ = 0;
}
inline ::orc_proto::Type_Kind Type::kind() const {
  // @@protoc_insertion_point(field_get:orc_proto.Type.kind)
  return static_cast< ::orc_proto::Type_Kind >(kind_);
}
inline void Type::set_kind(::orc_proto::Type_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:orc_proto.Type.kind)
}

// repeated uint32 subtypes = 2 [packed = true];
inline int Type::subtypes_size() const {
  return subtypes_.size();
}
inline void Type::clear_subtypes() {
  subtypes_.Clear();
}
inline ::google::protobuf::uint32 Type::subtypes(int index) const {
  // @@protoc_insertion_point(field_get:orc_proto.Type.subtypes)
  return subtypes_.Get(index);
}
inline void Type::set_subtypes(int index, ::google::protobuf::uint32 value) {
  subtypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:orc_proto.Type.subtypes)
}
inline void Type::add_subtypes(::google::protobuf::uint32 value) {
  subtypes_.Add(value);
  // @@protoc_insertion_point(field_add:orc_proto.Type.subtypes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Type::subtypes() const {
  // @@protoc_insertion_point(field_list:orc_proto.Type.subtypes)
  return subtypes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Type::mutable_subtypes() {
  // @@protoc_insertion_point(field_mutable_list:orc_proto.Type.subtypes)
  return &subtypes_;
}

// repeated string fieldNames = 3;
inline int Type::fieldnames_size() const {
  return fieldnames_.size();
}
inline void Type::clear_fieldnames() {
  fieldnames_.Clear();
}
inline const ::std::string& Type::fieldnames(int index) const {
  // @@protoc_insertion_point(field_get:orc_proto.Type.fieldNames)
  return fieldnames_.Get(index);
}
inline ::std::string* Type::mutable_fieldnames(int index) {
  // @@protoc_insertion_point(field_mutable:orc_proto.Type.fieldNames)
  return fieldnames_.Mutable(index);
}
inline void Type::set_fieldnames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:orc_proto.Type.fieldNames)
  fieldnames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Type::set_fieldnames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:orc_proto.Type.fieldNames)
  fieldnames_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Type::set_fieldnames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fieldnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:orc_proto.Type.fieldNames)
}
inline void Type::set_fieldnames(int index, const char* value, size_t size) {
  fieldnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orc_proto.Type.fieldNames)
}
inline ::std::string* Type::add_fieldnames() {
  // @@protoc_insertion_point(field_add_mutable:orc_proto.Type.fieldNames)
  return fieldnames_.Add();
}
inline void Type::add_fieldnames(const ::std::string& value) {
  fieldnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:orc_proto.Type.fieldNames)
}
#if LANG_CXX11
inline void Type::add_fieldnames(::std::string&& value) {
  fieldnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:orc_proto.Type.fieldNames)
}
#endif
inline void Type::add_fieldnames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fieldnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:orc_proto.Type.fieldNames)
}
inline void Type::add_fieldnames(const char* value, size_t size) {
  fieldnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:orc_proto.Type.fieldNames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Type::fieldnames() const {
  // @@protoc_insertion_point(field_list:orc_proto.Type.fieldNames)
  return fieldnames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Type::mutable_fieldnames() {
  // @@protoc_insertion_point(field_mutable_list:orc_proto.Type.fieldNames)
  return &fieldnames_;
}

// uint32 maximumLength = 4;
inline void Type::clear_maximumlength() {
  maximumlength_ = 0u;
}
inline ::google::protobuf::uint32 Type::maximumlength() const {
  // @@protoc_insertion_point(field_get:orc_proto.Type.maximumLength)
  return maximumlength_;
}
inline void Type::set_maximumlength(::google::protobuf::uint32 value) {
  
  maximumlength_ = value;
  // @@protoc_insertion_point(field_set:orc_proto.Type.maximumLength)
}

// uint32 precision = 5;
inline void Type::clear_precision() {
  precision_ = 0u;
}
inline ::google::protobuf::uint32 Type::precision() const {
  // @@protoc_insertion_point(field_get:orc_proto.Type.precision)
  return precision_;
}
inline void Type::set_precision(::google::protobuf::uint32 value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:orc_proto.Type.precision)
}

// uint32 scale = 6;
inline void Type::clear_scale() {
  scale_ = 0u;
}
inline ::google::protobuf::uint32 Type::scale() const {
  // @@protoc_insertion_point(field_get:orc_proto.Type.scale)
  return scale_;
}
inline void Type::set_scale(::google::protobuf::uint32 value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:orc_proto.Type.scale)
}

// -------------------------------------------------------------------

// Field

// .orc_proto.Type type = 1;
inline bool Field::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline void Field::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
}
inline const ::orc_proto::Type& Field::type() const {
  const ::orc_proto::Type* p = type_;
  // @@protoc_insertion_point(field_get:orc_proto.Field.type)
  return p != NULL ? *p : *reinterpret_cast<const ::orc_proto::Type*>(
      &::orc_proto::_Type_default_instance_);
}
inline ::orc_proto::Type* Field::release_type() {
  // @@protoc_insertion_point(field_release:orc_proto.Field.type)
  
  ::orc_proto::Type* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::orc_proto::Type* Field::mutable_type() {
  
  if (type_ == NULL) {
    type_ = new ::orc_proto::Type;
  }
  // @@protoc_insertion_point(field_mutable:orc_proto.Field.type)
  return type_;
}
inline void Field::set_allocated_type(::orc_proto::Type* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_;
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:orc_proto.Field.type)
}

// int64 i = 2;
inline void Field::clear_i() {
  i_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Field::i() const {
  // @@protoc_insertion_point(field_get:orc_proto.Field.i)
  return i_;
}
inline void Field::set_i(::google::protobuf::int64 value) {
  
  i_ = value;
  // @@protoc_insertion_point(field_set:orc_proto.Field.i)
}

// bytes value = 4;
inline void Field::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Field::value() const {
  // @@protoc_insertion_point(field_get:orc_proto.Field.value)
  return value_.GetNoArena();
}
inline void Field::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:orc_proto.Field.value)
}
#if LANG_CXX11
inline void Field::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:orc_proto.Field.value)
}
#endif
inline void Field::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:orc_proto.Field.value)
}
inline void Field::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:orc_proto.Field.value)
}
inline ::std::string* Field::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:orc_proto.Field.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Field::release_value() {
  // @@protoc_insertion_point(field_release:orc_proto.Field.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Field::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:orc_proto.Field.value)
}

// uint32 length = 3;
inline void Field::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 Field::length() const {
  // @@protoc_insertion_point(field_get:orc_proto.Field.length)
  return length_;
}
inline void Field::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:orc_proto.Field.length)
}

// -------------------------------------------------------------------

// Row

// repeated .orc_proto.Field field = 1;
inline int Row::field_size() const {
  return field_.size();
}
inline void Row::clear_field() {
  field_.Clear();
}
inline const ::orc_proto::Field& Row::field(int index) const {
  // @@protoc_insertion_point(field_get:orc_proto.Row.field)
  return field_.Get(index);
}
inline ::orc_proto::Field* Row::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:orc_proto.Row.field)
  return field_.Mutable(index);
}
inline ::orc_proto::Field* Row::add_field() {
  // @@protoc_insertion_point(field_add:orc_proto.Row.field)
  return field_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::orc_proto::Field >*
Row::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:orc_proto.Row.field)
  return &field_;
}
inline const ::google::protobuf::RepeatedPtrField< ::orc_proto::Field >&
Row::field() const {
  // @@protoc_insertion_point(field_list:orc_proto.Row.field)
  return field_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace orc_proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::orc_proto::Type_Kind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::orc_proto::Type_Kind>() {
  return ::orc_proto::Type_Kind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_orc_5fwrap_2eproto__INCLUDED
