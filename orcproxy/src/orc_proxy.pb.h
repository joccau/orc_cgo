// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orc_proxy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_orc_5fproxy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_orc_5fproxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_orc_5fproxy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_orc_5fproxy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_orc_5fproxy_2eproto;
namespace orc_proxy {
namespace proto {
class Field;
struct FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class Row;
struct RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
}  // namespace proto
}  // namespace orc_proxy
PROTOBUF_NAMESPACE_OPEN
template<> ::orc_proxy::proto::Field* Arena::CreateMaybeMessage<::orc_proxy::proto::Field>(Arena*);
template<> ::orc_proxy::proto::Row* Arena::CreateMaybeMessage<::orc_proxy::proto::Row>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace orc_proxy {
namespace proto {

enum Field_Kind : int {
  Field_Kind_BOOLEAN = 0,
  Field_Kind_BYTE = 1,
  Field_Kind_SHORT = 2,
  Field_Kind_INT = 3,
  Field_Kind_LONG = 4,
  Field_Kind_FLOAT = 5,
  Field_Kind_DOUBLE = 6,
  Field_Kind_STRING = 7,
  Field_Kind_BINARY = 8,
  Field_Kind_TIMESTAMP = 9,
  Field_Kind_LIST = 10,
  Field_Kind_MAP = 11,
  Field_Kind_STRUCT = 12,
  Field_Kind_UNION = 13,
  Field_Kind_DECIMAL = 14,
  Field_Kind_DATE = 15,
  Field_Kind_VARCHAR = 16,
  Field_Kind_CHAR = 17,
  Field_Kind_TIMESTAMP_INSTANT = 18,
  Field_Kind_Field_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Field_Kind_Field_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Field_Kind_IsValid(int value);
constexpr Field_Kind Field_Kind_Kind_MIN = Field_Kind_BOOLEAN;
constexpr Field_Kind Field_Kind_Kind_MAX = Field_Kind_TIMESTAMP_INSTANT;
constexpr int Field_Kind_Kind_ARRAYSIZE = Field_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Field_Kind_descriptor();
template<typename T>
inline const std::string& Field_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Field_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Field_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Field_Kind_descriptor(), enum_t_value);
}
inline bool Field_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Field_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Field_Kind>(
    Field_Kind_descriptor(), name, value);
}
// ===================================================================

class Field final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orc_proxy.proto.Field) */ {
 public:
  inline Field() : Field(nullptr) {}
  ~Field() override;
  explicit PROTOBUF_CONSTEXPR Field(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Field(const Field& from);
  Field(Field&& from) noexcept
    : Field() {
    *this = ::std::move(from);
  }

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline Field& operator=(Field&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Field& default_instance() {
    return *internal_default_instance();
  }
  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Field& a, Field& b) {
    a.Swap(&b);
  }
  inline void Swap(Field* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Field* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Field>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Field& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Field& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Field* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orc_proxy.proto.Field";
  }
  protected:
  explicit Field(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Field_Kind Kind;
  static constexpr Kind BOOLEAN =
    Field_Kind_BOOLEAN;
  static constexpr Kind BYTE =
    Field_Kind_BYTE;
  static constexpr Kind SHORT =
    Field_Kind_SHORT;
  static constexpr Kind INT =
    Field_Kind_INT;
  static constexpr Kind LONG =
    Field_Kind_LONG;
  static constexpr Kind FLOAT =
    Field_Kind_FLOAT;
  static constexpr Kind DOUBLE =
    Field_Kind_DOUBLE;
  static constexpr Kind STRING =
    Field_Kind_STRING;
  static constexpr Kind BINARY =
    Field_Kind_BINARY;
  static constexpr Kind TIMESTAMP =
    Field_Kind_TIMESTAMP;
  static constexpr Kind LIST =
    Field_Kind_LIST;
  static constexpr Kind MAP =
    Field_Kind_MAP;
  static constexpr Kind STRUCT =
    Field_Kind_STRUCT;
  static constexpr Kind UNION =
    Field_Kind_UNION;
  static constexpr Kind DECIMAL =
    Field_Kind_DECIMAL;
  static constexpr Kind DATE =
    Field_Kind_DATE;
  static constexpr Kind VARCHAR =
    Field_Kind_VARCHAR;
  static constexpr Kind CHAR =
    Field_Kind_CHAR;
  static constexpr Kind TIMESTAMP_INSTANT =
    Field_Kind_TIMESTAMP_INSTANT;
  static inline bool Kind_IsValid(int value) {
    return Field_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    Field_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    Field_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    Field_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return Field_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return Field_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return Field_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kKindFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // optional bytes value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional .orc_proxy.proto.Field.Kind kind = 1;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  ::orc_proxy::proto::Field_Kind kind() const;
  void set_kind(::orc_proxy::proto::Field_Kind value);
  private:
  ::orc_proxy::proto::Field_Kind _internal_kind() const;
  void _internal_set_kind(::orc_proxy::proto::Field_Kind value);
  public:

  // optional uint32 length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:orc_proxy.proto.Field)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int kind_;
  uint32_t length_;
  friend struct ::TableStruct_orc_5fproxy_2eproto;
};
// -------------------------------------------------------------------

class Row final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orc_proxy.proto.Row) */ {
 public:
  inline Row() : Row(nullptr) {}
  ~Row() override;
  explicit PROTOBUF_CONSTEXPR Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Row(const Row& from);
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Row& operator=(Row&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Row& default_instance() {
    return *internal_default_instance();
  }
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Row* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Row& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Row& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Row* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orc_proxy.proto.Row";
  }
  protected:
  explicit Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // repeated .orc_proxy.proto.Field field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  ::orc_proxy::proto::Field* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orc_proxy::proto::Field >*
      mutable_field();
  private:
  const ::orc_proxy::proto::Field& _internal_field(int index) const;
  ::orc_proxy::proto::Field* _internal_add_field();
  public:
  const ::orc_proxy::proto::Field& field(int index) const;
  ::orc_proxy::proto::Field* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orc_proxy::proto::Field >&
      field() const;

  // @@protoc_insertion_point(class_scope:orc_proxy.proto.Row)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orc_proxy::proto::Field > field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_orc_5fproxy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Field

// optional .orc_proxy.proto.Field.Kind kind = 1;
inline bool Field::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Field::has_kind() const {
  return _internal_has_kind();
}
inline void Field::clear_kind() {
  kind_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::orc_proxy::proto::Field_Kind Field::_internal_kind() const {
  return static_cast< ::orc_proxy::proto::Field_Kind >(kind_);
}
inline ::orc_proxy::proto::Field_Kind Field::kind() const {
  // @@protoc_insertion_point(field_get:orc_proxy.proto.Field.kind)
  return _internal_kind();
}
inline void Field::_internal_set_kind(::orc_proxy::proto::Field_Kind value) {
  _has_bits_[0] |= 0x00000002u;
  kind_ = value;
}
inline void Field::set_kind(::orc_proxy::proto::Field_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:orc_proxy.proto.Field.kind)
}

// optional uint32 length = 2;
inline bool Field::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Field::has_length() const {
  return _internal_has_length();
}
inline void Field::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Field::_internal_length() const {
  return length_;
}
inline uint32_t Field::length() const {
  // @@protoc_insertion_point(field_get:orc_proxy.proto.Field.length)
  return _internal_length();
}
inline void Field::_internal_set_length(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  length_ = value;
}
inline void Field::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:orc_proxy.proto.Field.length)
}

// optional bytes value = 3;
inline bool Field::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Field::has_value() const {
  return _internal_has_value();
}
inline void Field::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Field::value() const {
  // @@protoc_insertion_point(field_get:orc_proxy.proto.Field.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Field::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orc_proxy.proto.Field.value)
}
inline std::string* Field::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:orc_proxy.proto.Field.value)
  return _s;
}
inline const std::string& Field::_internal_value() const {
  return value_.Get();
}
inline void Field::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* Field::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* Field::release_value() {
  // @@protoc_insertion_point(field_release:orc_proxy.proto.Field.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Field::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orc_proxy.proto.Field.value)
}

// -------------------------------------------------------------------

// Row

// repeated .orc_proxy.proto.Field field = 1;
inline int Row::_internal_field_size() const {
  return field_.size();
}
inline int Row::field_size() const {
  return _internal_field_size();
}
inline void Row::clear_field() {
  field_.Clear();
}
inline ::orc_proxy::proto::Field* Row::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:orc_proxy.proto.Row.field)
  return field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orc_proxy::proto::Field >*
Row::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:orc_proxy.proto.Row.field)
  return &field_;
}
inline const ::orc_proxy::proto::Field& Row::_internal_field(int index) const {
  return field_.Get(index);
}
inline const ::orc_proxy::proto::Field& Row::field(int index) const {
  // @@protoc_insertion_point(field_get:orc_proxy.proto.Row.field)
  return _internal_field(index);
}
inline ::orc_proxy::proto::Field* Row::_internal_add_field() {
  return field_.Add();
}
inline ::orc_proxy::proto::Field* Row::add_field() {
  ::orc_proxy::proto::Field* _add = _internal_add_field();
  // @@protoc_insertion_point(field_add:orc_proxy.proto.Row.field)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orc_proxy::proto::Field >&
Row::field() const {
  // @@protoc_insertion_point(field_list:orc_proxy.proto.Row.field)
  return field_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace orc_proxy

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::orc_proxy::proto::Field_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::orc_proxy::proto::Field_Kind>() {
  return ::orc_proxy::proto::Field_Kind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_orc_5fproxy_2eproto
